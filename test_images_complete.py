#!/usr/bin/env python3
"""
Script complet pour tester et g√©rer les images pour la pr√©sentation de demain
Ce script va :
1. Tester tous les endpoints d'upload d'images
2. Cr√©er des images de d√©monstration
3. V√©rifier que tout fonctionne correctement
"""

import os
import sys
import django
import requests
from PIL import Image, ImageDraw, ImageFont
import io
import base64

# Configuration Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'keur_resto.settings')
django.setup()

from django.contrib.auth.models import User
from api.models import MenuItem, Ingredient, Base, Category, UserProfile

class ImageTestManager:
    def __init__(self, base_url="http://127.0.0.1:8000"):
        self.base_url = base_url
        self.token = None
        self.demo_images_created = []
        
    def create_demo_image(self, text, size=(300, 200), bg_color='lightblue', text_color='black'):
        """Cr√©e une image de d√©monstration avec du texte"""
        try:
            # Cr√©er une image avec PIL
            img = Image.new('RGB', size, color=bg_color)
            d = ImageDraw.Draw(img)
            
            # Calculer la position du texte pour le centrer
            bbox = d.textbbox((0, 0), text)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            position = ((size[0] - text_width) // 2, (size[1] - text_height) // 2)
            
            # Dessiner le texte
            d.text(position, text, fill=text_color)
            
            # Sauvegarder dans un buffer
            buffer = io.BytesIO()
            img.save(buffer, format='PNG')
            buffer.seek(0)
            
            # Sauvegarder aussi localement pour r√©f√©rence
            filename = f"demo_{text.replace(' ', '_').lower()}.png"
            local_path = os.path.join('media', 'demo_images', filename)
            os.makedirs(os.path.dirname(local_path), exist_ok=True)
            
            with open(local_path, 'wb') as f:
                f.write(buffer.getvalue())
                
            self.demo_images_created.append(local_path)
            print(f"‚úÖ Image de d√©mo cr√©√©e : {local_path}")
            
            buffer.seek(0)
            return buffer, filename
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation de l'image {text}: {e}")
            return None, None
    
    def get_admin_token(self):
        """R√©cup√®re un token d'authentification admin"""
        try:
            # Essayer de se connecter avec l'admin existant
            response = requests.post(f"{self.base_url}/api/token/", 
                                   json={"username": "admin", "password": "admin123"})
            
            if response.status_code == 200:
                self.token = response.json()['access']
                print("‚úÖ Authentification admin r√©ussie")
                return True
            else:
                print("‚ö†Ô∏è  Impossible de s'authentifier comme admin")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur d'authentification : {e}")
            return False
    
    def test_image_upload_endpoint(self, model_type, item_id, image_name):
        """Teste l'endpoint g√©n√©ral d'upload d'image"""
        try:
            image_buffer, filename = self.create_demo_image(f"{model_type.title()} {item_id}")
            if not image_buffer:
                return False
                
            headers = {}
            if self.token:
                headers['Authorization'] = f'Bearer {self.token}'
            
            files = {'image': (filename, image_buffer, 'image/png')}
            data = {
                'model_type': model_type,
                'item_id': item_id
            }
            
            response = requests.post(f"{self.base_url}/api/upload_image/", 
                                   files=files, data=data, headers=headers)
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Upload r√©ussi pour {model_type} {item_id}: {result.get('image_url')}")
                return True
            else:
                print(f"‚ùå √âchec upload {model_type} {item_id}: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur test upload {model_type} {item_id}: {e}")
            return False
    
    def test_specific_viewset_upload(self, endpoint, item_id, image_name):
        """Teste l'endpoint sp√©cifique d'un ViewSet"""
        try:
            image_buffer, filename = self.create_demo_image(image_name)
            if not image_buffer:
                return False
                
            headers = {}
            if self.token:
                headers['Authorization'] = f'Bearer {self.token}'
            
            files = {'image': (filename, image_buffer, 'image/png')}
            
            response = requests.post(f"{self.base_url}/api/{endpoint}/{item_id}/upload_image/", 
                                   files=files, headers=headers)
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Upload ViewSet r√©ussi pour {endpoint} {item_id}: {result.get('image_url')}")
                return True
            else:
                print(f"‚ùå √âchec upload ViewSet {endpoint} {item_id}: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur test ViewSet {endpoint} {item_id}: {e}")
            return False
    
    def create_test_data_if_needed(self):
        """Cr√©e des donn√©es de test si n√©cessaire"""
        print("\nüìä V√©rification des donn√©es de test...")
        
        # Cr√©er des cat√©gories si elles n'existent pas
        if not Category.objects.exists():
            categories = [
                {"nom": "Entr√©es", "description": "Plats d'entr√©e d√©licieux"},
                {"nom": "Plats principaux", "description": "Nos sp√©cialit√©s principales"},
                {"nom": "Desserts", "description": "Douceurs pour finir en beaut√©"},
                {"nom": "Boissons", "description": "Rafra√Æchissements et boissons chaudes"}
            ]
            for cat_data in categories:
                Category.objects.create(**cat_data)
            print("‚úÖ Cat√©gories cr√©√©es")
        
        # Cr√©er des bases si elles n'existent pas
        if not Base.objects.exists():
            bases = [
                {"nom": "Riz blanc", "prix": 500, "description": "Riz basmati parfum√©"},
                {"nom": "Riz thiof", "prix": 800, "description": "Riz au poisson thiof"},
                {"nom": "Couscous", "prix": 600, "description": "Couscous traditionnel"},
                {"nom": "Atti√©k√©", "prix": 400, "description": "Semoule de manioc"}
            ]
            for base_data in bases:
                Base.objects.create(**base_data)
            print("‚úÖ Bases cr√©√©es")
        
        # Cr√©er des ingr√©dients si ils n'existent pas
        if not Ingredient.objects.exists():
            ingredients = [
                {"nom": "Poulet", "prix": 1500, "type": "viande"},
                {"nom": "B≈ìuf", "prix": 2000, "type": "viande"},
                {"nom": "Poisson", "prix": 1800, "type": "poisson"},
                {"nom": "Tomates", "prix": 200, "type": "legume"},
                {"nom": "Oignons", "prix": 150, "type": "legume"},
                {"nom": "Sauce arachide", "prix": 300, "type": "sauce"}
            ]
            for ing_data in ingredients:
                Ingredient.objects.create(**ing_data)
            print("‚úÖ Ingr√©dients cr√©√©s")
        
        # Cr√©er des plats de menu si ils n'existent pas
        if not MenuItem.objects.exists():
            category = Category.objects.first()
            menus = [
                {"nom": "Thieboudienne", "prix": 2500, "type": "dej", "calories": 650, "temps_preparation": 45, "category": category},
                {"nom": "Yassa Poulet", "prix": 2200, "type": "dej", "calories": 580, "temps_preparation": 35, "category": category},
                {"nom": "Maf√©", "prix": 2000, "type": "dej", "calories": 620, "temps_preparation": 40, "category": category},
                {"nom": "Caf√© Touba", "prix": 300, "type": "petit_dej", "calories": 50, "temps_preparation": 5, "category": category}
            ]
            for menu_data in menus:
                MenuItem.objects.create(**menu_data)
            print("‚úÖ Plats de menu cr√©√©s")
    
    def run_complete_test(self):
        """Lance un test complet du syst√®me d'images"""
        print("üöÄ D√âBUT DES TESTS D'IMAGES POUR LA PR√âSENTATION")
        print("=" * 60)
        
        # 1. Cr√©er les donn√©es de test
        self.create_test_data_if_needed()
        
        # 2. S'authentifier
        print("\nüîê Authentification...")
        if not self.get_admin_token():
            print("‚ö†Ô∏è  Continuons sans authentification (acc√®s public seulement)")
        
        # 3. Tester l'endpoint g√©n√©ral d'upload
        print("\nüì§ Test de l'endpoint g√©n√©ral d'upload...")
        success_count = 0
        total_tests = 0
        
        # Test pour les bases
        bases = Base.objects.all()[:2]  # Tester sur 2 bases
        for base in bases:
            total_tests += 1
            if self.test_image_upload_endpoint('base', base.id, f"Base {base.nom}"):
                success_count += 1
        
        # Test pour les ingr√©dients  
        ingredients = Ingredient.objects.all()[:2]  # Tester sur 2 ingr√©dients
        for ingredient in ingredients:
            total_tests += 1
            if self.test_image_upload_endpoint('ingredient', ingredient.id, f"Ingr√©dient {ingredient.nom}"):
                success_count += 1
        
        # Test pour les menus
        menus = MenuItem.objects.all()[:2]  # Tester sur 2 menus
        for menu in menus:
            total_tests += 1
            if self.test_image_upload_endpoint('menu', menu.id, f"Menu {menu.nom}"):
                success_count += 1
        
        # 4. Tester les endpoints sp√©cifiques des ViewSets
        print("\nüì§ Test des endpoints sp√©cifiques des ViewSets...")
        
        # Test ViewSet MenuItem
        for menu in menus:
            total_tests += 1
            if self.test_specific_viewset_upload('menu', menu.id, f"ViewSet Menu {menu.nom}"):
                success_count += 1
        
        # Test ViewSet Ingredient
        for ingredient in ingredients:
            total_tests += 1
            if self.test_specific_viewset_upload('ingredients', ingredient.id, f"ViewSet Ingr√©dient {ingredient.nom}"):
                success_count += 1
        
        # 5. R√©sum√© des tests
        print("\n" + "=" * 60)
        print(f"üìä R√âSUM√â DES TESTS")
        print(f"Tests r√©ussis: {success_count}/{total_tests}")
        print(f"Taux de r√©ussite: {(success_count/total_tests)*100:.1f}%")
        
        if self.demo_images_created:
            print(f"\nüñºÔ∏è  Images de d√©mo cr√©√©es ({len(self.demo_images_created)}):")
            for img_path in self.demo_images_created:
                print(f"  - {img_path}")
        
        # 6. Recommandations pour la pr√©sentation
        print("\nüí° RECOMMANDATIONS POUR LA PR√âSENTATION:")
        print("1. ‚úÖ Le syst√®me d'upload d'images fonctionne")
        print("2. üì± Testez l'affichage des images dans votre app Flutter")
        print("3. üîó URLs des images accessibles via l'API")
        print("4. üé® Pr√©parez de vraies images de plats pour la d√©mo finale")
        print("5. üìä Interface admin disponible pour la gestion")
        
        return success_count, total_tests

def main():
    """Fonction principale"""
    print("üçΩÔ∏è  GESTIONNAIRE D'IMAGES KEUR RESTO")
    print("Pr√©paration pour la pr√©sentation de demain")
    print("=" * 50)
    
    # V√©rifier que Django fonctionne
    try:
        from django.core.management import execute_from_command_line
        print("‚úÖ Django configur√© correctement")
    except Exception as e:
        print(f"‚ùå Erreur Django: {e}")
        return
    
    # Lancer les tests
    manager = ImageTestManager()
    success, total = manager.run_complete_test()
    
    print(f"\nüéØ PR√äT POUR LA PR√âSENTATION: {success}/{total} fonctionnalit√©s test√©es")
    
    if success == total:
        print("üéâ EXCELLENT ! Tout fonctionne parfaitement !")
    elif success > total * 0.7:
        print("üëç BON ! La plupart des fonctionnalit√©s marchent")
    else:
        print("‚ö†Ô∏è  ATTENTION ! Plusieurs probl√®mes d√©tect√©s")

if __name__ == "__main__":
    main()
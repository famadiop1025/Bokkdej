#!/usr/bin/env python
import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'keur_resto.settings')
django.setup()

from django.contrib.auth.models import User
from api.models import UserProfile

def check_and_fix_users():
    """V√©rifier et corriger les utilisateurs pour la connexion PIN"""
    print("üîç Diagnostic des utilisateurs pour connexion PIN...\n")
    
    # 1. V√©rifier tous les utilisateurs existants
    print("=== UTILISATEURS EXISTANTS ===")
    users = User.objects.all()
    if not users:
        print("‚ùå Aucun utilisateur trouv√©!")
        return
    
    for user in users:
        print(f"\nüë§ User: {user.username}")
        print(f"   - Actif: {user.is_active}")
        print(f"   - Superuser: {user.is_superuser}")
        
        try:
            profile = user.userprofile
            print(f"   - R√¥le: {profile.role}")
            print(f"   - T√©l√©phone: {profile.phone}")
            if profile.phone:
                pin = profile.phone[-4:] if len(profile.phone) >= 4 else "TROP COURT"
                print(f"   - PIN calcul√©: {pin}")
            else:
                print(f"   - ‚ö†Ô∏è  PAS DE T√âL√âPHONE!")
        except UserProfile.DoesNotExist:
            print(f"   - ‚ùå PAS DE PROFIL!")
    
    print("\n" + "="*50)
    
    # 2. Cr√©er/corriger les utilisateurs de test
    print("\nüîß Cr√©ation/correction des utilisateurs de test...")
    
    # Admin user
    try:
        admin_user = User.objects.get(username='admin')
        print("‚úÖ Utilisateur admin existe")
    except User.DoesNotExist:
        admin_user = User.objects.create_user(
            username='admin',
            password='admin123',
            is_staff=True,
            is_superuser=True
        )
        print("‚úÖ Utilisateur admin cr√©√©")
    
    # Profil admin
    try:
        admin_profile = UserProfile.objects.get(user=admin_user)
        print("‚úÖ Profil admin existe")
    except UserProfile.DoesNotExist:
        admin_profile = UserProfile.objects.create(user=admin_user, role='admin')
        print("‚úÖ Profil admin cr√©√©")
    
    # Mettre √† jour le t√©l√©phone admin
    admin_profile.phone = '33123456781234'  # PIN: 1234
    admin_profile.role = 'admin'
    admin_profile.save()
    print(f"‚úÖ Admin - T√©l√©phone: {admin_profile.phone}, PIN: {admin_profile.phone[-4:]}")
    
    # Staff user
    try:
        staff_user = User.objects.get(username='staff')
        print("‚úÖ Utilisateur staff existe")
    except User.DoesNotExist:
        staff_user = User.objects.create_user(
            username='staff',
            password='staff123',
            is_staff=True,
        )
        print("‚úÖ Utilisateur staff cr√©√©")
    
    # Profil staff
    try:
        staff_profile = UserProfile.objects.get(user=staff_user)
        print("‚úÖ Profil staff existe")
    except UserProfile.DoesNotExist:
        staff_profile = UserProfile.objects.create(user=staff_user, role='admin')
        print("‚úÖ Profil staff cr√©√©")
    
    # Mettre √† jour le t√©l√©phone staff
    staff_profile.phone = '33123456785678'  # PIN: 5678
    staff_profile.role = 'admin'  # Chang√© en admin pour tester
    staff_profile.save()
    print(f"‚úÖ Staff - T√©l√©phone: {staff_profile.phone}, PIN: {staff_profile.phone[-4:]}")
    
    # 3. V√©rification finale
    print("\nüìã V√âRIFICATION FINALE...")
    print("=== UTILISATEURS POUR CONNEXION PIN ===")
    
    staff_profiles = UserProfile.objects.filter(role__in=['admin', 'personnel', 'chef'])
    for profile in staff_profiles:
        if profile.phone:
            pin = profile.phone[-4:]
            print(f"‚úÖ {profile.user.username}: PIN {pin} (r√¥le: {profile.role})")
        else:
            print(f"‚ùå {profile.user.username}: PAS DE T√âL√âPHONE (r√¥le: {profile.role})")
    
    print("\nüéØ PINS DE TEST:")
    print("   - Admin: 1234")
    print("   - Staff: 5678")
    print("\n‚úÖ Configuration termin√©e!")

if __name__ == "__main__":
    check_and_fix_users()